; FAT filesystem module definitions

;include "../block_device/block_device.def"
; copied from block_device.def, because z80asm is rubbish at dealing with relative paths:
if !blockdev_data
defvars 0
{
	blockdev_driver	ds.w	1	; pointer to device driver (jump table)
	blockdev_data	ds.w	1	; pointer / space for device-driver-specific data
	blockdev_size
}
endif

; Buffers

defc	buf_numbufs = 4
defc	buf_secsize = 512

; Buffer handles

defvars 0
{
	fbh_flags	ds.b	1	; flags (*must* be first)
	fbh_phandle	ds.w	1	; partition handle
	fbh_sector	ds.b	4	; logical sector
	
	fbh_size	ds.b	1	; dummy
}

defgroup
{
	bufflag_inuse = 0,		; set if buffer in use
	bufflag_upd			; set if buffer has been updated
}

; Drives

defc	drive_numdrives = 16

; Directory handles

defc	dir_numhandles = 16		; can reduce considerably if necessary

defvars 0
{
	fdh_phandle	ds.w	1	; partition handle
	fdh_flags	ds.b	1	; bit 7=1 for root
	fdh_clusstart	ds.w	1	; start cluster (0 for root)
	fdh_sector	ds.b	1	; current sector
	fdh_cluster	ds.w	1	; current cluster (sector offset for root)
	fdh_entry	ds.b	1	; current entry within sector

	fdh_size	ds.b	1	; dummy
}

; FAT boot record

defvars 0
{
	bootrec_jumpcode	ds.b	3
	bootrec_oemname		ds.b	8
	bootrec_secsize		ds.w	1
	bootrec_clussize	ds.b	1
	bootrec_resvd		ds.w	1
	bootrec_fatcopies	ds.b	1
	bootrec_rootents	ds.w	1
	bootrec_secs_small	ds.w	1
	bootrec_media		ds.b	1
	bootrec_fatsize		ds.w	1
	bootrec_spt		ds.w	1
	bootrec_hds		ds.w	1
	bootrec_hidden		ds.l	1
	bootrec_secs_large	ds.l	1
	bootrec_drive		ds.w	1
	bootrec_extsig		ds.b	1
	bootrec_serial		ds.l	1
	bootrec_volname		ds.b	11
	bootrec_fatname		ds.b	8
	bootrec_code		ds.b	448
	bootrec_signature	ds.w	1
}

defc	bootrec_extsig_byte = $29

; FAT directory entries

defc	direntry_deleted = $e5		; deleted flag
defc	DIRENTRY_ENTRYSIZE = $20	; size of a directory entry

defvars 0
{
	direntry_name	ds.b	8	; name
	direntry_ext	ds.b	3	; extension
	direntry_attr	ds.b	1	; attributes
	direntry_unused	ds.b	10	; not used without LFN
	direntry_time	ds.w	1	; time
	direntry_date	ds.w	1	; date
	direntry_cluster ds.w	1	; start cluster
	direntry_filesize ds.l	1	; size in bytes
}

; Directory entry attribute bits
defgroup
{
	dirattr_ro = 0,
	dirattr_hid,
	dirattr_sys,
	dirattr_vol,
	dirattr_dir,
	dirattr_arc
}

defc	dirattr_lfn = $0f		; R/O, HIDDEN, SYS, VOL
defc	dirattr_syshid_mask = $06	; SYS, HIDDEN
defc	dirattr_nodeletemask = $1f	; only ARC allowed

; File handles
defc	file_numhandles = 16

defvars 0
{
	ffh_dhandle	ds.b	fdh_size ; copy of directory handle, with entry=this file
	ffh_mode	ds.b	1	; file mode flags (0 if handle free)
	ffh_cluster	ds.w	1	; current cluster
	ffh_sector	ds.b	1	; current sector
	ffh_offset	ds.w	1	; current pos within sector
	ffh_filepos	ds.l	1	; filepointer
	
	; The next three must be contigious (for copying from FAT dir and to +3DOS header)
	ffh_clusstart	ds.w	1	; start cluster
	ffh_filesize	ds.l	1	; exact filesize in bytes
	ffh_header	ds.b	8	; +3DOS header record (set by +3 BASIC)
	ffh_idedos_hdr	ds.w	1	; address of header in IDEDOS
	ffh_size	ds.b	1	; dummy
}

; Partition handles
; TBD: This stuff can be re-ordered for convenience of setup, except the standard partition
;      handle *must* come first.
defc	part_numhandles = 16		; 1 per drive

defvars 0
{
	fph_parthandle	ds.b	blockdev_size ; associated block device (corresponds to IDEDOS partition handle in residos)
	fph_fattype	ds.b	1	; bit 7=0 for FAT12, 1 for FAT 16
	fph_fatsize	ds.w	1	; # secs per FAT
	fph_fat_copies	ds.b	1	; # copies of FAT
	fph_fat1_start	ds.b	3	; logical sector start for FAT 1 (TBD: Not enough for FAT32)
	fph_rootsize	ds.w	1	; # secs in root directory
	fph_root_start	ds.b	3	; logical sector start for root directory (TBD: Not enough for FAT32)
	fph_clussize	ds.b	1	; # secs per cluster
	fph_maxclust	ds.w	1	; maximum valid cluster (min is $0002)
	fph_lastalloc	ds.w	1	; last allocated cluster (init to $0001)
	fph_data_start	ds.b	3	; logical sector start for data (cluster $0002) (TBD: Not enough for FAT32)
	fph_primary	ds.b	1	; primary partition number (1-4)
	fph_secondary	ds.b	1	; secondary partition number (0, or 1+)
	fph_freeclusts	ds.w	1	; number of free clusters
	
	fph_size	ds.b	1	; dummy
}

defc	fattype_fat16 = $80

; Data area

defc	fatfs_data_area = $c000 ; TODO: allocate this in fatfs_data.asm

defvars fatfs_data_area
{	
	; Structures
	buf_mrulist	ds.b	buf_numbufs		; IDs of buffers in order, MRU first
	buf_handles	ds.b	fbh_size*buf_numbufs	; buffer handles
	buf_buffers	ds.b	buf_secsize*buf_numbufs	; sector buffers
	file_handles	ds.b	ffh_size*file_numhandles ; file handles
	drive_ptrs	ds.w	drive_numdrives		; pointers to drive directory handles
	sys_directory	ds.b	fdh_size		; system directory handle (temporary)
	sys_directory2	ds.b	fdh_size		; system directory handle (temporary)

	; Miscellaneous variables
	drive_sectorbuf	ds.w	1			; pointer to sector buffer used for MBRs etc
	fat_defdrive	ds.b	1			; default drive letter ('A'-'P')
	dir_filespec1	ds.b	11			; 11-byte filespecs
	dir_filespec2	ds.b	11
	fatfs_data_area_end
}

; error codes (borrowed from p3dos.def)
defgroup {      rc_ready,
                rc_wp,
                rc_seek,
                rc_crc,
                rc_nodata,
                rc_mark,
                rc_unrecog,
                rc_unknown,
                rc_diskchg,
                rc_unsuit,
                rc_badname=20,
                rc_badparam,
                rc_nodrive,
                rc_nofile,
                rc_exists,
                rc_eof,
                rc_diskfull,
                rc_dirfull,
                rc_ro,
                rc_number,
                rc_denied,
                rc_norename,
                rc_extent,
                rc_uncached,
                rc_toobig,
                rc_notboot,
                rc_inuse
        }
; ...aaand from idedos.def
defgroup {      rc_invpartition=56,
                rc_partexist,
                rc_notimp,
                rc_partopen,
                rc_nohandle,
                rc_notswap,
                rc_mapped,
                rc_noxdpb,
                rc_noswap,
                rc_invdevice,
                rc_8bitdata,
                rc_cmdphase,
                rc_dataphase,
                rc_notdir
        }

; "reason codes" from idedos.def
; Reason codes for ide_path
defgroup {      rc_path_change = 0,
                rc_path_get,
                rc_path_make,
                rc_path_delete
        }
