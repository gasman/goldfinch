; low-level I/O API

; ===
; structure of a filesystem object
defvars 0
{
	filesystem_driver	ds.w	1	; pointer to device driver (jump table)
	filesystem_data	ds.w	1	; pointer / space for filesystem-specific data
	filesystem_size
}

; filesystem_data may be used for many things depending on the filesystem, so
; here we'll define more appropriate filesystem-specific aliases:
defc filesystem_trdos_block_device = filesystem_data
defc filesystem_fatfs_phandle = filesystem_data

; ===
; structure of a device driver, to be implemented as a jump table of JP xxxx entries (3 bytes each)
defvars 0
{
	fsdriver_open_root_dir	ds.b	3
	fsdriver_read_dir	ds.b	3
	fsdriver_open_dirent	ds.b	3
	fsdriver_read_file	ds.b	3
	fsdriver_close_file	ds.b	3
	fsdriver_open_subdir	ds.b	3
	fsdriver_dir_home	ds.b	3
	fsdriver_write_file	ds.b	3
	fsdriver_create_file	ds.b	3
}

; ===
; structure of a directory handle
defvars 0
{
	dir_filesystem	ds.b	filesystem_size	; copy of the filesystem object
	dir_fsdata	; followed by filesystem-specific state
}
; Filesystem-specific portion - TR-DOS
defvars dir_fsdata
{
	dir_trdos_block_number	ds.w	1	; block number that the directory pointer currently sits in
	dir_trdos_block_offset	ds.b	1	; offset into the (256-byte) sector where the next dir entry is
}
; Filesystem-specific portion - fatfs
defvars dir_fsdata
{
;	dir_fatfs_phandle	ds.w	1	; partition handle
; - present in original residos fatfs, but here it is duplicated by the embedded filesystem object
	dir_fatfs_flags	ds.b	1	; bit 7=1 for root
	dir_fatfs_clusstart	ds.w	1	; start cluster (0 for root)
	dir_fatfs_sector	ds.b	1	; current sector
	dir_fatfs_cluster	ds.w	1	; current cluster (sector offset for root)
	dir_fatfs_entry	ds.b	1	; current entry within sector
	
	dir_fatfs_size
}
defc dir_size = dir_fatfs_size

; ===
defc MAX_NAME = 32	;max length of a filename (including terminating \0)

; structure of a directory entry
defvars 0
{
	dirent_dir	ds.b	dir_size	; copy of the dir record, preserved in the state of pointing to this entry.
		; Also contains the filesystem handle
	dirent_filename	ds.b	MAX_NAME	; null-terminated filename
	dirent_flags	ds.b	1	; bit field; bit 0 set if this is a directory
	dirent_fsdata	; filesystem-specific state; enough to open the file (probably not needed; the copy of the dir record should be enough)
	dirent_size
}

; ===
; structure of a file handle
defvars 0
{
	file_dir	ds.b	dir_size	; copy of the dir object, configured to point to this file
	file_fsdata	; followed by filesystem-specific state
}
defc file_filesystem = file_dir	; DEPRECATED (fs drivers will be migrated to expect a full dir record here, not just a filesystem record)

; Filesystem-specific portion - TR-DOS
defvars file_fsdata
{
	file_trdos_block_number	ds.w	1	; number of block containing next data
	file_trdos_block_offset	ds.b	1	; offset of data pointer into that block
	file_trdos_blocks_remaining	ds.b	1	; number of blocks left before EOF
	
	file_trdos_size
}
; Filesystem-specific portion - fatfs
defvars file_fsdata
{
	file_fatfs_mode	ds.b	1	; file mode flags (0 if handle free)
	file_fatfs_cluster	ds.w	1	; current cluster
	file_fatfs_sector	ds.b	1	; current sector
	file_fatfs_offset	ds.w	1	; current pos within sector
	file_fatfs_filepos	ds.l	1	; filepointer
	file_fatfs_clusstart	ds.w	1	; start cluster
	file_fatfs_filesize	ds.l	1	; exact filesize in bytes

	file_fatfs_size
}
defc file_size=file_fatfs_size
